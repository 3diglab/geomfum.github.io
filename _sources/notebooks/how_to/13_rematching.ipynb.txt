{
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# How to use [ReMatching](https://arxiv.org/abs/2305.09274]) to compute a functional map?"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 1,
            "metadata": {},
            "outputs": [],
            "source": [
                "import geomstats.backend as gs\n",
                "from geomfum.dataset import NotebooksDataset\n",
                "from geomfum.refine import ZoomOut\n",
                "from geomfum.shape import TriangleMesh\n",
                "from geomfum.shape.hierarchical import HierarchicalMesh"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "[Load meshes](00_load_mesh_from_file.ipynb)."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 2,
            "metadata": {},
            "outputs": [
                {
                    "name": "stderr",
                    "output_type": "stream",
                    "text": [
                        "INFO: Data has already been downloaded... using cached file ('/home/ubuntu/.geomfum/data/cat-00.off').\n",
                        "INFO: Data has already been downloaded... using cached file ('/home/ubuntu/.geomfum/data/lion-00.off').\n"
                    ]
                },
                {
                    "data": {
                        "text/plain": [
                            "((7207, 14410), (5000, 9996))"
                        ]
                    },
                    "execution_count": 2,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "dataset = NotebooksDataset()\n",
                "\n",
                "mesh_a = TriangleMesh.from_file(dataset.get_filename(\"cat-00\"))\n",
                "mesh_b = TriangleMesh.from_file(dataset.get_filename(\"lion-00\"))\n",
                "\n",
                "(mesh_a.n_vertices, mesh_a.n_faces), (mesh_b.n_vertices, mesh_b.n_faces)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Create [hierarchical meshes](./11_hierarchical_mesh.ipynb)."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 3,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": [
                            "((1004, 2004), (1021, 2038))"
                        ]
                    },
                    "execution_count": 3,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "hmesh_a = HierarchicalMesh.from_registry(mesh_a, min_n_samples=1000)\n",
                "hmesh_b = HierarchicalMesh.from_registry(mesh_b, min_n_samples=1000)\n",
                "\n",
                "(\n",
                "    (hmesh_a.low.n_vertices, hmesh_a.low.n_faces),\n",
                "    (hmesh_b.low.n_vertices, hmesh_b.low.n_faces),\n",
                ")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "[Set Laplace eigenbasis](./02_mesh_laplacian_spectrum.ipynb) for each low-resolution mesh."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 4,
            "metadata": {},
            "outputs": [],
            "source": [
                "hmesh_a.low.laplacian.find_spectrum(spectrum_size=10, set_as_basis=True)\n",
                "hmesh_b.low.laplacian.find_spectrum(spectrum_size=10, set_as_basis=True)\n",
                "\n",
                "hmesh_a.low.basis.use_k = 6\n",
                "hmesh_b.low.basis.use_k = 5"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Extend the basis for the high-resolution meshes."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 5,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": [
                            "((7207, 10), (5000, 10))"
                        ]
                    },
                    "execution_count": 5,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "hmesh_a.extend_basis(set_as_basis=True)\n",
                "hmesh_b.extend_basis(set_as_basis=True)\n",
                "\n",
                "(\n",
                "    hmesh_a.high.basis.vecs.shape,\n",
                "    hmesh_b.high.basis.vecs.shape,\n",
                ")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Assume we have a [valid functional map](./07_functional_map.ipynb) $C$ between `hmesh_a.low` and `hmesh_b.low` (which for demonstration purposes, we instantiate randomly)."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 6,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": [
                            "(5, 6)"
                        ]
                    },
                    "execution_count": 6,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "fmap_matrix = gs.random.uniform(\n",
                "    size=(\n",
                "        hmesh_b.low.basis.spectrum_size,\n",
                "        hmesh_a.low.basis.spectrum_size,\n",
                "    )\n",
                ")\n",
                "\n",
                "fmap_matrix.shape"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "Now, this functional map can be seamlessly used with the high-resolution meshes. For example, we can [upsample it with ZoomOut](./15_refine_functional_map.ipynb)."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 7,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/plain": [
                            "(7, 10)"
                        ]
                    },
                    "execution_count": 7,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "upsampler = ZoomOut(nit=2, step=(2, 1))\n",
                "\n",
                "upsampled_fmap_matrix = upsampler(\n",
                "    fmap_matrix,\n",
                "    hmesh_a.high.basis,\n",
                "    hmesh_b.high.basis,\n",
                ")\n",
                "\n",
                "upsampled_fmap_matrix.shape"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "NB: `mesh_a` and `hmesh_a.high` are the same object, so it is indiferent which one to use."
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## Further reading\n",
                "\n",
                "* [How to compute a functional map?](./functional_map.ipynb)\n",
                "\n",
                "* [How to refine a functional map?](./15_refine_functional_map.ipynb)"
            ]
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "venv",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.12.3"
        },
        "requires": [
            "rematching"
        ]
    },
    "nbformat": 4,
    "nbformat_minor": 2
}
